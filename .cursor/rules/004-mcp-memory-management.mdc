---
description: Comprehensive Memory System Memory Management
globs: **/*
alwaysApply: true
---
# Memory Management and Pattern Learning Rules

These rules define how to manage memory efficiently and promote pattern learning using MCP tools.

## Memory Summarization

```javascript
// Periodically summarize working memory to improve quality and reduce noise
// Only runs during low-activity periods to avoid performance impact
onIdlePeriod: (duration) => {
  if (duration > 3 * 60 * 1000) {
    // After 3 minutes of idle time
    mcp_cursor10x_mcp_process_memory({
      session_id: "{{SESSION_ID}}",
      operation: "summarize",
      options: { minImportance: 0.3, limit: 20 },
    });
  }
};
```

## Memory Consolidation

```javascript
// Consolidate memory items to reduce redundancy
// This helps maintain performance as memory grows
onSessionDuration: (duration) => {
  if (duration > 60 * 60 * 1000 && duration % (30 * 60 * 1000) < 1000) {
    // Every 30 minutes after first hour
    mcp_cursor10x_mcp_process_memory({
      session_id: "{{SESSION_ID}}",
      operation: "consolidate",
      options: { similarityThreshold: 0.7 },
    });
  }
};
```

## Pattern Promotion

```javascript
// Promote high-quality patterns to the global repository
// This enables cross-session learning and knowledge sharing
onSessionDuration: (duration) => {
  if (duration > 2 * 60 * 60 * 1000 && duration % (60 * 60 * 1000) < 1000) {
    // Every hour after first 2 hours
    mcp_cursor10x_mcp_process_memory({
      session_id: "{{SESSION_ID}}",
      operation: "promote_patterns",
      options: { minFrequency: 3, minReinforcement: 0.5 },
    });
  }
};
```

## Pre-Session End Pattern Learning

```javascript
// Before ending a session, promote any high-quality patterns
// This ensures valuable knowledge isn't lost between sessions
onPreSessionEnd: () => {
  mcp_cursor10x_mcp_process_memory({
    session_id: "{{SESSION_ID}}",
    operation: "promote_patterns",
    options: { minFrequency: 2, minReinforcement: 0.4 },
  });
};
```