---
description: Comprehensive Memory System Conversation Rules
globs: **/*
alwaysApply: true
---
# Conversation Context Management for MCP Memory

These rules ensure conversation history and context are properly managed using MCP tools.

## User Message Storage

```javascript
// Store each user message to maintain conversation history
// This ensures consistent context for the AI assistant
onUserMessage: (message) => {
  mcp_cursor10x_mcp_store_conversation({
    session_id: "{{SESSION_ID}}",
    messages: [{ role: "user", content: "{{USER_MESSAGE}}", importance: 0.7 }],
    summarize: false,
  });
};
```

## Assistant Message Storage

```javascript
// Store each assistant response to maintain conversation history
// Slightly lower importance than user messages by default
onAssistantResponse: (message) => {
  mcp_cursor10x_mcp_store_conversation({
    session_id: "{{SESSION_ID}}",
    messages: [
      {
        role: "assistant",
        content: "{{ASSISTANT_MESSAGE}}",
        importance: 0.6,
      },
    ],
    summarize: false,
  });
};
```

## High-Importance Message Detection

```javascript
// Detect and mark high-importance messages based on content
onUserMessage: (message) => {
  // Code-related questions get higher importance
  if (
    message.match(
      /(how|can|what|why).*(code|function|class|implement|fix|bug|error)/i
    )
  ) {
    mcp_cursor10x_mcp_store_conversation({
      session_id: "{{SESSION_ID}}",
      messages: [
        { role: "user", content: "{{USER_MESSAGE}}", importance: 0.9 },
      ],
      summarize: false,
    });
  }
};
```

## Conversation Summarization Trigger

```javascript
// Generate summaries when conversation reaches a significant length
// This helps maintain context without exceeding token limits
onConversationLength: (length) => {
  if (length >= 15 && length % 15 === 0) {
    // Every 15 messages
    mcp_cursor10x_mcp_store_conversation({
      session_id: "{{SESSION_ID}}",
      messages: [],
      summarize: true,
      summary_type: "incremental",
    });
  }

  if (length >= 30 && length % 30 === 0) {
    // Every 30 messages
    mcp_cursor10x_mcp_store_conversation({
      session_id: "{{SESSION_ID}}",
      messages: [],
      summarize: true,
      summary_type: "session",
    });
  }
};
```

## Topic Change Detection

```javascript
// Generate topic summaries when the conversation changes subject
// This creates logical break points in the conversation history
onTopicChange: (previousTopic, newTopic) => {
  mcp_cursor10x_mcp_store_conversation({
    session_id: "{{SESSION_ID}}",
    messages: [],
    summarize: true,
    summary_type: "topic",
  });
};
```

## Context Retrieval for Questions

```javascript
// Retrieve relevant context when the user asks a question
// This ensures the assistant has the necessary information to respond
onUserQuestion: (question) => {
  // Only retrieve context for code or project-related questions
  if (
    question.match(
      /(how|can|what|why|where|find|show).*(code|file|project|function|class|implement|work)/i
    )
  ) {
    mcp_cursor10x_mcp_hybrid_search({
      session_id: "{{SESSION_ID}}",
      query: "{{USER_QUERY}}",
      limit: 10,
      threshold: 0.6,
      tiered: true,
      language: "{{CURRENT_LANGUAGE}}",
    });
  }
};
```